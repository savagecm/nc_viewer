#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
创建示例NC文件用于测试3D可视化器

这个脚本会生成一个包含模拟气象数据的NetCDF文件，
可以用来测试3D NC文件可视化器的功能。
"""

import numpy as np
import netCDF4 as nc
from datetime import datetime, timedelta
import os

def create_sample_temperature_data():
    """创建示例温度数据"""
    print("正在创建示例温度数据...")
    
    # 定义网格
    lat_range = np.arange(-90, 91, 2)  # 纬度: -90到90度，间隔2度
    lon_range = np.arange(-180, 180, 2)  # 经度: -180到180度，间隔2度
    
    # 创建网格
    lon_grid, lat_grid = np.meshgrid(lon_range, lat_range)
    
    # 生成模拟温度数据（基于纬度的温度分布）
    # 赤道附近温度高，两极温度低
    base_temp = 15 - 0.5 * np.abs(lat_grid)  # 基础温度分布
    
    # 添加一些随机变化和地理特征
    noise = np.random.normal(0, 3, lat_grid.shape)  # 随机噪声
    seasonal_effect = 5 * np.sin(np.radians(lon_grid / 2))  # 季节性效应
    
    temperature = base_temp + noise + seasonal_effect
    
    return lat_range, lon_range, temperature

def create_sample_precipitation_data():
    """创建示例降水数据"""
    print("正在创建示例降水数据...")
    
    # 定义网格
    lat_range = np.arange(-60, 61, 1.5)  # 纬度范围稍小，分辨率更高
    lon_range = np.arange(-120, 121, 1.5)  # 经度范围稍小，分辨率更高
    
    # 创建网格
    lon_grid, lat_grid = np.meshgrid(lon_range, lat_range)
    
    # 生成模拟降水数据
    # 热带地区降水多，干旱地区降水少
    tropical_rain = 200 * np.exp(-((lat_grid)**2) / 400)  # 热带降水带
    monsoon_effect = 100 * np.sin(np.radians(lon_grid)) * np.cos(np.radians(lat_grid * 2))
    random_variation = np.random.exponential(20, lat_grid.shape)  # 指数分布的随机变化
    
    precipitation = np.maximum(0, tropical_rain + monsoon_effect + random_variation)
    
    return lat_range, lon_range, precipitation

def create_sample_wind_data():
    """创建示例风速数据"""
    print("正在创建示例风速数据...")
    
    # 定义网格
    lat_range = np.arange(-80, 81, 2.5)
    lon_range = np.arange(-180, 180, 2.5)
    
    # 创建网格
    lon_grid, lat_grid = np.meshgrid(lon_range, lat_range)
    
    # 生成模拟风速数据
    # 基于科里奥利效应和纬度的风速分布
    westerlies = 15 * np.exp(-((lat_grid - 45)**2) / 200)  # 西风带
    trade_winds = 10 * np.exp(-((np.abs(lat_grid) - 15)**2) / 100)  # 信风带
    polar_winds = 8 * np.exp(-((np.abs(lat_grid) - 70)**2) / 50)  # 极地风
    
    wind_speed = westerlies + trade_winds + polar_winds + np.random.normal(0, 2, lat_grid.shape)
    wind_speed = np.maximum(0, wind_speed)  # 确保风速非负
    
    return lat_range, lon_range, wind_speed

def create_netcdf_file(filename, lat, lon, data, variable_name, units, long_name):
    """创建NetCDF文件"""
    print(f"正在创建NetCDF文件: {filename}")
    
    # 创建NetCDF文件
    dataset = nc.Dataset(filename, 'w', format='NETCDF4')
    
    # 创建维度
    lat_dim = dataset.createDimension('lat', len(lat))
    lon_dim = dataset.createDimension('lon', len(lon))
    time_dim = dataset.createDimension('time', None)  # 无限维度
    
    # 创建坐标变量
    latitudes = dataset.createVariable('lat', 'f4', ('lat',))
    longitudes = dataset.createVariable('lon', 'f4', ('lon',))
    times = dataset.createVariable('time', 'f8', ('time',))
    
    # 创建数据变量
    var = dataset.createVariable(variable_name, 'f4', ('time', 'lat', 'lon',), 
                                fill_value=-9999.0)
    
    # 设置坐标变量的属性
    latitudes.units = 'degrees_north'
    latitudes.long_name = 'latitude'
    latitudes.standard_name = 'latitude'
    
    longitudes.units = 'degrees_east'
    longitudes.long_name = 'longitude'
    longitudes.standard_name = 'longitude'
    
    times.units = 'hours since 2024-01-01 00:00:00'
    times.long_name = 'time'
    times.calendar = 'gregorian'
    
    # 设置数据变量的属性
    var.units = units
    var.long_name = long_name
    var.standard_name = variable_name
    var.coordinates = 'time lat lon'
    
    # 写入数据
    latitudes[:] = lat
    longitudes[:] = lon
    times[0] = 0  # 第一个时间步
    var[0, :, :] = data
    
    # 添加全局属性
    dataset.title = f'Sample {long_name} Data for 3D Visualization'
    dataset.institution = '3D NC Viewer Sample Data Generator'
    dataset.source = 'Synthetic data for testing purposes'
    dataset.history = f'Created on {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'
    dataset.references = 'Generated by create_sample_nc.py'
    dataset.comment = 'This is synthetic data created for testing the 3D NC file visualizer'
    dataset.Conventions = 'CF-1.6'
    
    # 关闭文件
    dataset.close()
    print(f"✅ 文件创建完成: {filename}")

def main():
    """主函数"""
    print("🌍 3D NC文件可视化器 - 示例数据生成器")
    print("=" * 50)
    
    # 检查是否安装了netCDF4
    try:
        import netCDF4
    except ImportError:
        print("❌ 错误: 需要安装netCDF4库")
        print("请运行: pip install netCDF4")
        return
    
    # 创建示例数据
    datasets = [
        {
            'func': create_sample_temperature_data,
            'filename': 'sample_temperature.nc',
            'variable': 'temperature',
            'units': 'degrees_C',
            'long_name': 'Air Temperature'
        },
        {
            'func': create_sample_precipitation_data,
            'filename': 'sample_precipitation.nc',
            'variable': 'precipitation',
            'units': 'mm/day',
            'long_name': 'Daily Precipitation'
        },
        {
            'func': create_sample_wind_data,
            'filename': 'sample_wind_speed.nc',
            'variable': 'wind_speed',
            'units': 'm/s',
            'long_name': 'Wind Speed'
        }
    ]
    
    created_files = []
    
    for dataset_info in datasets:
        try:
            # 生成数据
            lat, lon, data = dataset_info['func']()
            
            # 创建NetCDF文件
            create_netcdf_file(
                dataset_info['filename'],
                lat, lon, data,
                dataset_info['variable'],
                dataset_info['units'],
                dataset_info['long_name']
            )
            
            created_files.append(dataset_info['filename'])
            
        except Exception as e:
            print(f"❌ 创建 {dataset_info['filename']} 时出错: {e}")
    
    # 显示结果
    print("\n" + "=" * 50)
    print("📊 示例数据文件创建完成!")
    print("\n创建的文件:")
    
    for filename in created_files:
        if os.path.exists(filename):
            size = os.path.getsize(filename) / 1024  # KB
            print(f"  ✅ {filename} ({size:.1f} KB)")
        else:
            print(f"  ❌ {filename} (创建失败)")
    
    print("\n💡 使用说明:")
    print("1. 启动3D可视化器: python3 start_server.py")
    print("2. 在浏览器中加载上述任一NC文件")
    print("3. 选择对应的变量进行可视化")
    print("\n🎯 推荐测试顺序:")
    print("   - sample_temperature.nc (温度数据，全球覆盖)")
    print("   - sample_precipitation.nc (降水数据，高分辨率)")
    print("   - sample_wind_speed.nc (风速数据，中等分辨率)")
    
if __name__ == '__main__':
    main()